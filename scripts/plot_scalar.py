from argparse import ArgumentParser
import os
import re
import shutil
import sys
from fpde import *

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("-f", "--file", dest="file",
                        help="File with data to plot, if not given defaults to the latest file generated by the solver", default="")
    parser.add_argument("-u", "--using", dest="using",
                        help="Set using, can set several directives"
                        " e.g. '1:2|1:3'", default="({t}):({dt})")
    parser.add_argument("-o", "--out", dest="out",
                        help="Name of the generated gnuplot script",
                        default="plot.gp")
    parser.add_argument("-w", "--with", dest="wit",
                        help="Set with", default="l")
    parser.add_argument("-t", "--title", dest="title",
                        help="Set title", default='')
    parser.add_argument("-d", "--data-dir", dest="dir",
                        help="Set data directory", default='.')
    parser.add_argument("-T", "--plot-title", dest="plot_title",
                        help="Set title", default='')


    options = parser.parse_args()

    if( options.file == "" ):
        file = sorted(d for d in os.listdir(options.dir) \
               if os.path.isdir(d) \
               and re.match("\d{8}-\d{6}\.\d{3}",d))[-1]
        file = os.path.join(options.dir, file)
        file = os.path.join(file, os.listdir(file)[0],
                            "module_print_scalar_data","data")
    else:
        file = options.file

    dict = scalar_dictionary(open(file).readline())
    out = open(options.out, 'w')

    generate_plot_cmd(out, options, dict, file)

    os.system("gnuplot -persist {0}".format(options.out))
